import React, { useState, useEffect } from "react";
import {
  FaDownload,
  FaTimes,
  FaChartBar,
  FaChartLine,
  FaChartPie,
  FaCalendarAlt,
} from "react-icons/fa";

const colors = {
  lightPink: "#EDDCD9",
  offWhite: "#F2EBE9",
  brightPink: "#DE5499",
  darkTeal: "#264143",
  orange: "#E9944C",
};

export default function ReportsModal({ isOpen, onClose, data }) {
  const [reportType, setReportType] = useState("revenue");
  const [dateRange, setDateRange] = useState("30");
  const [chartType, setChartType] = useState("bar");

  // Generate sample data if no real data exists
  const getSampleData = () => {
    if (data && Object.keys(data).length > 0 && data.totalProducts > 0) {
      return data; // Use real data if available
    }

    // Generate sample data for testing
    return {
      totalUsers: 12,
      totalOrders: 8,
      totalProducts: 15,
      totalRevenue: 1247.85,
      monthlyRevenue: [
        { month: "Jan", revenue: 0 },
        { month: "Feb", revenue: 0 },
        { month: "Mar", revenue: 0 },
        { month: "Apr", revenue: 0 },
        { month: "May", revenue: 0 },
        { month: "Jun", revenue: 1247.85 },
      ],
      orderStatuses: {
        Pending: 3,
        Processing: 2,
        Shipped: 2,
        Delivered: 1,
      },
      topProducts: [
        { name: "Vintage Denim Jacket", sales: 3, revenue: 245.97 },
        { name: "Retro Summer Dress", sales: 2, revenue: 165.0 },
        { name: "Classic White Sneakers", sales: 2, revenue: 115.5 },
        { name: "Leather Crossbody Bag", sales: 1, revenue: 89.99 },
        { name: "Floral Blouse", sales: 2, revenue: 98.5 },
      ],
    };
  };

  const reportData = getSampleData();

  if (!isOpen) return null;

  const generateReport = () => {
    const canvas = document.createElement("canvas");
    const ctx = canvas.getContext("2d");
    canvas.width = 800;
    canvas.height = 600;

    // Draw report content
    ctx.fillStyle = colors.offWhite;
    ctx.fillRect(0, 0, 800, 600);

    // Title
    ctx.fillStyle = colors.darkTeal;
    ctx.font = "bold 32px Arial";
    ctx.fillText("Sales Report", 50, 50);

    // Date
    ctx.font = "18px Arial";
    ctx.fillText(`Generated on: ${new Date().toLocaleDateString()}`, 50, 80);

    // Report type
    ctx.font = "bold 24px Arial";
    ctx.fillText(
      `${reportType.charAt(0).toUpperCase() + reportType.slice(1)} Report`,
      50,
      120
    );

    // Data based on report type
    if (reportType === "revenue") {
      // Total Revenue
      ctx.font = "bold 28px Arial";
      ctx.fillStyle = colors.brightPink;
      ctx.fillText(
        `Total Revenue: €${(reportData.totalRevenue || 0).toFixed(2)}`,
        50,
        170
      );

      // Monthly breakdown
      ctx.font = "bold 20px Arial";
      ctx.fillStyle = colors.darkTeal;
      ctx.fillText("Monthly Revenue:", 50, 220);

      ctx.font = "16px Arial";
      let yPos = 250;
      reportData.monthlyRevenue?.forEach((item, index) => {
        ctx.fillText(
          `${item.month || "Unknown"}: €${(item.revenue || 0).toFixed(2)}`,
          70,
          yPos
        );
        yPos += 25;
      });
    } else if (reportType === "orders") {
      // Total Orders
      ctx.font = "bold 28px Arial";
      ctx.fillStyle = colors.brightPink;
      ctx.fillText(`Total Orders: ${reportData.totalOrders || 0}`, 50, 170);

      // Order statuses
      ctx.font = "bold 20px Arial";
      ctx.fillStyle = colors.darkTeal;
      ctx.fillText("Order Statuses:", 50, 220);

      ctx.font = "16px Arial";
      let yPos = 250;
      Object.entries(reportData.orderStatuses || {}).forEach(
        ([status, count]) => {
          ctx.fillText(`${status || "Unknown"}: ${count || 0}`, 70, yPos);
          yPos += 25;
        }
      );
    } else if (reportType === "products") {
      // Total Products
      ctx.font = "bold 28px Arial";
      ctx.fillStyle = colors.brightPink;
      ctx.fillText(`Total Products: ${reportData.totalProducts || 0}`, 50, 170);

      // Top products
      ctx.font = "bold 20px Arial";
      ctx.fillStyle = colors.darkTeal;
      ctx.fillText("Top Products:", 50, 220);

      ctx.font = "16px Arial";
      let yPos = 250;
      reportData.topProducts?.slice(0, 5).forEach((product, index) => {
        ctx.fillText(
          `${product.name || "Unknown"}: ${product.sales || 0} sales, €${(
            product.revenue || 0
          ).toFixed(2)}`,
          70,
          yPos
        );
        yPos += 25;
      });
    }

    // Footer
    ctx.font = "14px Arial";
    ctx.fillStyle = colors.darkTeal;
    ctx.fillText("Generated by Admin Dashboard", 50, 550);

    return canvas.toDataURL();
  };

  const downloadReport = () => {
    const dataUrl = generateReport();
    const link = document.createElement("a");
    link.download = `report-${reportType}-${
      new Date().toISOString().split("T")[0]
    }.png`;
    link.href = dataUrl;
    link.click();
  };

  const exportToCSV = () => {
    let csvContent = "data:text/csv;charset=utf-8,";

    if (reportType === "revenue") {
      csvContent += "Month,Revenue\n";
      reportData.monthlyRevenue?.forEach((item) => {
        csvContent += `${item.month || "Unknown"},${item.revenue || 0}\n`;
      });
    } else if (reportType === "orders") {
      csvContent += "Status,Count\n";
      Object.entries(reportData.orderStatuses || {}).forEach(
        ([status, count]) => {
          csvContent += `${status || "Unknown"},${count || 0}\n`;
        }
      );
    } else if (reportType === "products") {
      csvContent += "Product Name,Sales Count,Revenue\n";
      reportData.topProducts?.forEach((product) => {
        csvContent += `${product.name || "Unknown Product"},${
          product.sales || 0
        },${product.revenue || 0}\n`;
      });
    }

    const link = document.createElement("a");
    link.download = `report-${reportType}-${
      new Date().toISOString().split("T")[0]
    }.csv`;
    link.href = encodeURI(csvContent);
    link.click();
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-xl shadow-2xl max-w-4xl w-full mx-4 max-h-[90vh] overflow-y-auto">
        {/* Header */}
        {/* <div className="p-6 border-b border-gray-200 flex items-center justify-between">
          <h2 className="text-2xl font-bold" style={{ color: colors.darkTeal }}>
            Generate Reports
          </h2>
          <button
            onClick={onClose}
            className="text-gray-500 hover:text-gray-700 transition-colors ml-10"
          >
            <FaTimes size={24} />
          </button>
        </div> */}
        {/* Chatgpt */}
        {/* <div className="p-6 border-b border-gray-200 flex items-center justify-between flex-row-reverse">
          <h2 className="text-2xl font-bold" style={{ color: colors.darkTeal }}>
            Generate Reports
          </h2>
          <button
            onClick={onClose}
            className="text-gray-500 hover:text-gray-700 transition-colors"
            aria-label="Close"
          >
            <FaTimes size={24} />
          </button>
        </div> */}

        <div className="p-5 border-b border-gray-200 relative">
          <h2
            className="text-2xl font-bold pr-12"
            style={{ color: colors.darkTeal }}
          >
            Generate Reports
          </h2>
          <button
            onClick={onClose}
            className="absolute top-6 right-6 text-gray-500 hover:text-gray-700 transition-colors"
            aria-label="Close"
          >
            <FaTimes size={24} />
          </button>
        </div>

        {/* Content */}
        <div className="p-6">
          {/* Report Type Selection */}
          <div className="mb-6">
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Report Type
            </label>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              {[
                {
                  id: "revenue",
                  label: "Revenue Report",
                  icon: <FaChartLine />,
                },
                { id: "orders", label: "Orders Report", icon: <FaChartBar /> },
                {
                  id: "products",
                  label: "Products Report",
                  icon: <FaChartPie />,
                },
              ].map((type) => (
                <button
                  key={type.id}
                  onClick={() => setReportType(type.id)}
                  className={`p-4 rounded-lg border-2 transition-all duration-200 flex items-center space-x-3 ${
                    reportType === type.id
                      ? "border-blue-500 bg-blue-50"
                      : "border-gray-200 hover:border-gray-300"
                  }`}
                >
                  <div className="text-blue-500">{type.icon}</div>
                  <span className="font-medium">{type.label}</span>
                </button>
              ))}
            </div>
          </div>

          {/* Date Range Selection */}
          <div className="mb-6">
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Date Range
            </label>
            <div className="flex items-center space-x-4">
              <select
                value={dateRange}
                onChange={(e) => setDateRange(e.target.value)}
                className="border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="7">Last 7 days</option>
                <option value="30">Last 30 days</option>
                <option value="90">Last 90 days</option>
                <option value="365">Last year</option>
              </select>
              <div className="flex items-center space-x-2 text-sm text-gray-500">
                <FaCalendarAlt />
                <span>Custom range</span>
              </div>
            </div>
          </div>

          {/* Chart Type Selection */}
          <div className="mb-6">
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Chart Type
            </label>
            <div className="flex space-x-4">
              {[
                { id: "bar", label: "Bar Chart" },
                { id: "line", label: "Line Chart" },
                { id: "pie", label: "Pie Chart" },
              ].map((type) => (
                <button
                  key={type.id}
                  onClick={() => setChartType(type.id)}
                  className={`px-4 py-2 rounded-lg border transition-colors ${
                    chartType === type.id
                      ? "border-blue-500 bg-blue-50 text-blue-700"
                      : "border-gray-300 hover:border-gray-400"
                  }`}
                >
                  {type.label}
                </button>
              ))}
            </div>
          </div>

          {/* Preview */}
          <div className="mb-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">
              Report Preview
            </h3>
            <div className="bg-gray-50 rounded-lg p-6 min-h-[300px]">
              {reportType === "revenue" && (
                <div className="space-y-4">
                  <div className="text-center">
                    <div className="text-3xl font-bold text-blue-600 mb-2">
                      €{(reportData.totalRevenue || 0).toFixed(2)}
                    </div>
                    <div className="text-[#171717]">Total Revenue</div>
                  </div>
                  <div className="grid grid-cols-2 gap-4">
                    {reportData.monthlyRevenue?.map((item, index) => (
                      <div
                        key={index}
                        className="bg-white p-3 rounded border text-center"
                      >
                        <div className="font-semibold text-gray-800">
                          {item.month || "Unknown"}
                        </div>
                        <div className="text-blue-600">
                          €{(item.revenue || 0).toFixed(2)}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {reportType === "orders" && (
                <div className="space-y-4">
                  <div className="text-center">
                    <div className="text-3xl font-bold text-green-600 mb-2">
                      {reportData.totalOrders || 0}
                    </div>
                    <div className="text-[#171717]">Total Orders</div>
                  </div>
                  <div className="grid grid-cols-2 gap-4">
                    {Object.entries(reportData.orderStatuses || {}).map(
                      ([status, count]) => (
                        <div
                          key={status}
                          className="bg-white p-3 rounded border text-center"
                        >
                          <div className="font-semibold text-gray-800">
                            {status || "Unknown"}
                          </div>
                          <div className="text-green-600">{count || 0}</div>
                        </div>
                      )
                    )}
                  </div>
                </div>
              )}

              {reportType === "products" && (
                <div className="space-y-4">
                  <div className="text-center">
                    <div className="text-3xl font-bold text-purple-600 mb-2">
                      {reportData.totalProducts || 0}
                    </div>
                    <div className="text-[#171717]">Total Products</div>
                  </div>
                  <div className="space-y-3">
                    {reportData.topProducts
                      ?.slice(0, 5)
                      .map((product, index) => (
                        <div
                          key={index}
                          className="bg-white p-3 rounded border flex justify-between items-center"
                        >
                          <div>
                            <div className="font-semibold text-gray-800">
                              {product.name || "Unknown Product"}
                            </div>
                            <div className="text-sm text-[#171717]">
                              {product.sales || 0} sales
                            </div>
                          </div>
                          <div className="text-purple-600 font-semibold">
                            €{(product.revenue || 0).toFixed(2)}
                          </div>
                        </div>
                      ))}
                  </div>
                </div>
              )}
            </div>
          </div>

          {/* Export Options */}
          <div className="flex items-center justify-between">
            <div className="flex space-x-4">
              <button
                onClick={downloadReport}
                className="flex items-center space-x-2 px-6 py-3 rounded-lg text-white font-medium transition-colors hover:opacity-90"
                style={{ backgroundColor: colors.brightPink }}
              >
                <FaDownload size={16} />
                <span>Download PNG</span>
              </button>
              <button
                onClick={exportToCSV}
                className="flex items-center space-x-2 px-6 py-3 rounded-lg border border-gray-300 text-gray-700 font-medium hover:bg-gray-50 transition-colors"
              >
                <FaDownload size={16} />
                <span>Export CSV</span>
              </button>
            </div>
            <button
              onClick={onClose}
              className="px-1.5 py-1.5 rounded border border-gray-300 text-[#171717] font-medium hover:bg-gray-50 transition-colors text-xs"
            >
              Cancel
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}
